package com.jjesuxyz.cronometro;

import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.core.content.ContextCompat;
import java.util.ArrayList;



/**
 * ListVwAdaptador class is used by the ListView widget to define the layout of
 * each row in the MainActivity UI ListView. In its constructor this class
 * receive as parameter a reference to the MainActivity UI.  It also receives a
 * xml file id. It also receives an ArrayList that contains all the lap info
 * that will be displayed in the ListView.
 *
 */
public class ListVwAdaptador extends ArrayAdapter {

    private Context context;
                                  //ArrayList holding lap time info.
    private ArrayList<String> arrList;



    /**
     * ListVwAdaptador() constructor of this class. This is the only constructor
     * that this class needs. It receives from the local chronometer widget, as
     * parameters, the lap times info, the xml file id to be inflated, and the
     * app Context. It initializes some local class variables with the parameters
     * it receives.
     *
     * @param context type Context
     * @param resource type int
     * @param arrayStrLaps type ArrayList
     */
    public ListVwAdaptador(@NonNull Context context, int resource, ArrayList<String> arrayStrLaps) {
        super(context, resource, arrayStrLaps);

        this.context = context;
        arrList = arrayStrLaps;

    }   //End of ListVwAdaptador() constructor



    /**
     * getView() function is used to customize each row of the ListView that
     * shows users the list of lap times that were generated by the local
     * Chronometer widget. Each row contains four TextView elements that are
     * customized by this function. Each row shows the date and time the lap
     * happend. The lapsed time the lap lasted. The distance the lap was
     * traveled, and the location where the lap was traveled.
     *
     * @param position type int
     * @param convert type View
     * @param parent type ViewGroup
     * @return type View
     */
    @Override
    public View getView(int position, View convert, ViewGroup parent) {

        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                                  //First time that ListView rows are populated.
        if (convert == null) {
            convert = inflater.inflate(R.layout.laps_layout, parent, false);
        }
                                  //This is just for debugging issues.
       if (convert != null) {
          l("Convert es NOTNOTNTOTJONOOTT NULLLNULL NULLL");
       }
                                  //Splitting string records from the Chronometer
                                  //widget.
        String[] strArr = arrList.get(position).split("_");
                                 //Setting the lap row id
        TextView txtvwIndex = (TextView) convert.findViewById(R.id.txtvwLVIndexId);
        txtvwIndex.setText(strArr[0]);
                                  //Setting the time when the last lap ended.
        TextView txtvwStart = (TextView) convert.findViewById(R.id.txtvwLVStartId);
        txtvwStart.setText(strArr[1]);
                                  //Setting duration of elapsed lap time.
        TextView txtvwDur = (TextView) convert.findViewById(R.id.txtvwLVDurationId);
        txtvwDur.setText(strArr[2]);
                                  //Setting row text color.
        if ((position % 2) == 0) {
            txtvwIndex.setTextColor(ContextCompat.getColor(getContext(), R.color.colorLetrasEnable));//Color.rgb(0, 0, 200));
            txtvwStart.setTextColor(ContextCompat.getColor(getContext(), R.color.colorLetrasEnable));//Color.rgb(0, 0, 200));
            txtvwDur.setTextColor(ContextCompat.getColor(getContext(), R.color.colorLetrasEnable));//Color.rgb(0, 0, 200));
        }
                                  //Returning the row fully formatted.
        return convert;

    }   //End of getView() function



    /**
     * updateValues(String[]) function is not used, so far, in this version of the app
     *
     * @param arrStr type String[]
     */
    void updateValues(String[] arrStr) {
                                  //Clearing the ArrayLIst to update with new
                                  //lap info rows.
        arrList.clear();
                                  //Updating the internal ArrayLIst with new data.
        addAll(arrList);

    }   //End of updateValues() function



    /**
     * The l(String) function is used only to debug this class. It uses the
     * Log.d() function to pass the information to the Android Monitor window.
     * This information contains the class name and some information about the
     * error or data about the debugging process.
     *
     * @param str type String
     */
    private void l(String str){
        Log.d("NICKY", this.getClass().getSimpleName() + " -> " + str);
    }

}   //End of ListVwAdaptador class


/*********************END OF ListVwAdaptador.java FILE************************/
